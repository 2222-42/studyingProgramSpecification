//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-09-05 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:/VDM-SL/studyingProgramSpecification/chap6/VendingMachine.vdmsl".


#include "VendingMachine.h"


static Map vdm_VendingMachine_stock;

static Map vdm_VendingMachine_price;

static Int vdm_VendingMachine_amount;

TYPE_VendingMachine_VendingMachine &TYPE_VendingMachine_VendingMachine::Init (const type_tiM &p1, const type_tiM &p2, const TYPE_VendingMachine_Yen &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

type_tiM TYPE_VendingMachine_VendingMachine::get_stock () const {
  return this->GetMap(1);
}

void TYPE_VendingMachine_VendingMachine::set_stock (const type_tiM &p) {
  this->SetField(1, p);
}

type_tiM TYPE_VendingMachine_VendingMachine::get_price () const {
  return this->GetMap(2);
}

void TYPE_VendingMachine_VendingMachine::set_price (const type_tiM &p) {
  this->SetField(2, p);
}

TYPE_VendingMachine_Yen TYPE_VendingMachine_VendingMachine::get_amount () const {
  return this->GetInt(3);
}

void TYPE_VendingMachine_VendingMachine::set_amount (const TYPE_VendingMachine_Yen &p) {
  this->SetField(3, p);
}

#ifndef DEF_VendingMachine_inv_VendingMachine

Bool vdm_VendingMachine_inv_VendingMachine (const TYPE_VendingMachine_VendingMachine &var_1_1) {
  const Map vdm_VendingMachine_stock (var_1_1.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_1_1.GetMap(pos_VendingMachine_VendingMachine_price));
  return Bool(vdm_VendingMachine_stock.Dom() == vdm_VendingMachine_price.Dom());
}

#endif // DEF_VendingMachine_inv_VendingMachine

#ifndef DEF_VendingMachine_inv_Coin

Bool vdm_VendingMachine_inv_Coin (const TYPE_VendingMachine_Yen &vdm_VendingMachine_c) {
  return Bool(mk_set(Int(10), Int(50), Int(100), Int(500)).InSet(vdm_VendingMachine_c));
}

#endif // DEF_VendingMachine_inv_Coin


void init_VendingMachine_VDMLib () {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_VendingMachine_VendingMachine, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_VendingMachine_VendingMachine, L"VendingMachine`VendingMachine");
  AddRecordTag(L"VendingMachine`VendingMachine", TAG_TYPE_VendingMachine_VendingMachine);
}

#include "VendingMachine_userimpl.cpp"


void init_VendingMachine () {
  init_VendingMachine_VDMLib();
  {

#include "VendingMachine_init.cpp"


  }
}

#ifndef DEF_VendingMachine_ExistStock

Bool vdm_VendingMachine_ExistStock (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_stock) {
  if (!vdm_VendingMachine_pre_ExistStock(vdm_VendingMachine_g, vdm_VendingMachine_stock).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in ExistStock");
  }
  return Bool((static_cast<const Int &>(vdm_VendingMachine_stock[vdm_VendingMachine_g])).GetValue() > 0);
}

#endif // DEF_VendingMachine_ExistStock

#ifndef DEF_VendingMachine_pre_ExistStock

Bool vdm_VendingMachine_pre_ExistStock (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_stock) {
  return Bool(vdm_VendingMachine_stock.Dom().InSet(vdm_VendingMachine_g));
}

#endif // DEF_VendingMachine_pre_ExistStock

#ifndef DEF_VendingMachine_EnoughMoney

Bool vdm_VendingMachine_EnoughMoney (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_price, const TYPE_VendingMachine_Yen &vdm_VendingMachine_amount) {
  if (!vdm_VendingMachine_pre_EnoughMoney(vdm_VendingMachine_g, vdm_VendingMachine_price, vdm_VendingMachine_amount).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in EnoughMoney");
  }
  return Bool(vdm_VendingMachine_amount.GetValue() >= (static_cast<const Int &>(vdm_VendingMachine_price[vdm_VendingMachine_g])).GetValue());
}

#endif // DEF_VendingMachine_EnoughMoney

#ifndef DEF_VendingMachine_pre_EnoughMoney

Bool vdm_VendingMachine_pre_EnoughMoney (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_price, const TYPE_VendingMachine_Yen &vdm_VendingMachine_amount) {
  return Bool(vdm_VendingMachine_price.Dom().InSet(vdm_VendingMachine_g));
}

#endif // DEF_VendingMachine_pre_EnoughMoney

#ifndef DEF_VendingMachine_AvailablePurchase

Bool vdm_VendingMachine_AvailablePurchase (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_stock, const type_tiM &vdm_VendingMachine_price, const TYPE_VendingMachine_Yen &vdm_VendingMachine_amount) {
  if (!vdm_VendingMachine_pre_AvailablePurchase(vdm_VendingMachine_g, vdm_VendingMachine_stock, vdm_VendingMachine_price, vdm_VendingMachine_amount).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in AvailablePurchase");
  }
  return Bool(vdm_VendingMachine_ExistStock(vdm_VendingMachine_g, vdm_VendingMachine_stock).GetValue() ? vdm_VendingMachine_EnoughMoney(vdm_VendingMachine_g, vdm_VendingMachine_price, vdm_VendingMachine_amount).GetValue() : false);
}

#endif // DEF_VendingMachine_AvailablePurchase

#ifndef DEF_VendingMachine_pre_AvailablePurchase

Bool vdm_VendingMachine_pre_AvailablePurchase (const TYPE_VendingMachine_Goods &vdm_VendingMachine_g, const type_tiM &vdm_VendingMachine_stock, const type_tiM &vdm_VendingMachine_price, const TYPE_VendingMachine_Yen &vdm_VendingMachine_amount) {
  return Bool((vdm_VendingMachine_stock.Dom().InSet(vdm_VendingMachine_g)) ? (vdm_VendingMachine_price.Dom().InSet(vdm_VendingMachine_g)) : false);
}

#endif // DEF_VendingMachine_pre_AvailablePurchase

#ifndef DEF_VendingMachine_init_uVendingMachine

Bool vdm_VendingMachine_init_uVendingMachine (const TYPE_VendingMachine_VendingMachine &var_1_1) {
  const Map vdm_VendingMachine_stock (var_1_1.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_1_1.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_1_1.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(((vdm_VendingMachine_stock == Map()) ? (vdm_VendingMachine_price == Map()) : false) ? (vdm_VendingMachine_amount.GetValue() == 0) : false);
}

#endif // DEF_VendingMachine_init_uVendingMachine

#ifndef DEF_VendingMachine_post_Return

Bool vdm_VendingMachine_post_Return (const TYPE_VendingMachine_VendingMachine &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2) {
  const Map _vdm_VendingMachine_stock (var_1_1.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_1_1.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_1_1.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(vdm_VendingMachine_amount.GetValue() == 0);
}

#endif // DEF_VendingMachine_post_Return

#ifndef DEF_VendingMachine_pre_Purchase

Bool vdm_VendingMachine_pre_Purchase (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Map vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool((vdm_VendingMachine_stock.Dom().InSet(vdm_VendingMachine_g)) ? vdm_VendingMachine_AvailablePurchase(vdm_VendingMachine_g, vdm_VendingMachine_stock, vdm_VendingMachine_price, vdm_VendingMachine_amount).GetValue() : false);
}

#endif // DEF_VendingMachine_pre_Purchase

#ifndef DEF_VendingMachine_post_Purchase

Bool vdm_VendingMachine_post_Purchase (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Map _vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  Map var2_7;
  Map modmap_8 (Map().Insert(vdm_VendingMachine_g, static_cast<const Int &>(_vdm_VendingMachine_stock[vdm_VendingMachine_g]) - Int(1)));
  var2_7 = _vdm_VendingMachine_stock;
  var2_7.ImpOverride(modmap_8);
  return Bool((vdm_VendingMachine_stock == var2_7) ? (vdm_VendingMachine_amount.GetValue() == (_vdm_VendingMachine_amount - static_cast<const Int &>(vdm_VendingMachine_price[vdm_VendingMachine_g])).GetValue()) : false);
}

#endif // DEF_VendingMachine_post_Purchase

#ifndef DEF_VendingMachine_pre_SetupPrice

Bool vdm_VendingMachine_pre_SetupPrice (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_Yen &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Int vdm_VendingMachine_p (var_2_2);
  const Map vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(vdm_VendingMachine_price.Dom().InSet(vdm_VendingMachine_g));
}

#endif // DEF_VendingMachine_pre_SetupPrice

#ifndef DEF_VendingMachine_post_SetupPrice

Bool vdm_VendingMachine_post_SetupPrice (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_Yen &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3, const TYPE_VendingMachine_VendingMachine &var_4_4) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Int vdm_VendingMachine_p (var_2_2);
  const Map _vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_4_4.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_4_4.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_4_4.GetInt(pos_VendingMachine_VendingMachine_amount));
  Map var2_7;
  Map modmap_8 (Map().Insert(vdm_VendingMachine_g, vdm_VendingMachine_p));
  var2_7 = _vdm_VendingMachine_price;
  var2_7.ImpOverride(modmap_8);
  return Bool(vdm_VendingMachine_price == var2_7);
}

#endif // DEF_VendingMachine_post_SetupPrice

#ifndef DEF_VendingMachine_pre_SetupStock

Bool vdm_VendingMachine_pre_SetupStock (const TYPE_VendingMachine_Goods &var_1_1, const Int &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Int vdm_VendingMachine_num (var_2_2);
  const Map vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(vdm_VendingMachine_stock.Dom().InSet(vdm_VendingMachine_g));
}

#endif // DEF_VendingMachine_pre_SetupStock

#ifndef DEF_VendingMachine_post_SetupStock

Bool vdm_VendingMachine_post_SetupStock (const TYPE_VendingMachine_Goods &var_1_1, const Int &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3, const TYPE_VendingMachine_VendingMachine &var_4_4) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Int vdm_VendingMachine_num (var_2_2);
  const Map _vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_4_4.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_4_4.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_4_4.GetInt(pos_VendingMachine_VendingMachine_amount));
  Map var2_7;
  Map modmap_8 (Map().Insert(vdm_VendingMachine_g, vdm_VendingMachine_num));
  var2_7 = _vdm_VendingMachine_stock;
  var2_7.ImpOverride(modmap_8);
  return Bool(vdm_VendingMachine_stock == var2_7);
}

#endif // DEF_VendingMachine_post_SetupStock

#ifndef DEF_VendingMachine_post_InsertCoint

Bool vdm_VendingMachine_post_InsertCoint (const TYPE_VendingMachine_Coin &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3) {
  const Int vdm_VendingMachine_c (var_1_1);
  const Map _vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(vdm_VendingMachine_amount.GetValue() == (_vdm_VendingMachine_amount + vdm_VendingMachine_c).GetValue());
}

#endif // DEF_VendingMachine_post_InsertCoint

#ifndef DEF_VendingMachine_pre_RegisterGoods

Bool vdm_VendingMachine_pre_RegisterGoods (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Map vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  return Bool(!vdm_VendingMachine_stock.Dom().InSet(vdm_VendingMachine_g));
}

#endif // DEF_VendingMachine_pre_RegisterGoods

#ifndef DEF_VendingMachine_post_RegisterGoods

Bool vdm_VendingMachine_post_RegisterGoods (const TYPE_VendingMachine_Goods &var_1_1, const TYPE_VendingMachine_VendingMachine &var_2_2, const TYPE_VendingMachine_VendingMachine &var_3_3) {
  const Token vdm_VendingMachine_g (var_1_1);
  const Map _vdm_VendingMachine_stock (var_2_2.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map _vdm_VendingMachine_price (var_2_2.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int _vdm_VendingMachine_amount (var_2_2.GetInt(pos_VendingMachine_VendingMachine_amount));
  const Map vdm_VendingMachine_stock (var_3_3.GetMap(pos_VendingMachine_VendingMachine_stock));
  const Map vdm_VendingMachine_price (var_3_3.GetMap(pos_VendingMachine_VendingMachine_price));
  const Int vdm_VendingMachine_amount (var_3_3.GetInt(pos_VendingMachine_VendingMachine_amount));
  Bool varRes_4;
  Map m1_12 (_vdm_VendingMachine_stock);
  Map m2_13 (Map().Insert(vdm_VendingMachine_g, Int(0)));
  if (!m1_12.IsCompatible(m2_13)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_12.ImpOverride(m2_13);
  if (vdm_VendingMachine_stock == m1_12) {
    Map m1_21 (_vdm_VendingMachine_price);
    Map m2_22 (Map().Insert(vdm_VendingMachine_g, Int(0)));
    if (!m1_21.IsCompatible(m2_22)) {
      CGUTIL::RunTime(L"Duplicate entries had different values");
    }
    m1_21.ImpOverride(m2_22);
    varRes_4 = Bool(vdm_VendingMachine_price == m1_21);
  }
  else {
    varRes_4 = Bool(false);
  }
  return varRes_4;
}

#endif // DEF_VendingMachine_post_RegisterGoods


