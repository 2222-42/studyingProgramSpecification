//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-09-05 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:\\VDM-SL\\studyingProgramSpecification\\chap6\\VendingMachineWithLamp.vdmsl".


#include "VendingMachineWithLamp.h"


static TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model;

static TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp;

TYPE_VendingMachineWithLamp_VendingMachine &TYPE_VendingMachineWithLamp_VendingMachine::Init (const TYPE_VendingMachineWithLamp_Model &p1, const TYPE_VendingMachineWithLamp_Lamp &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

TYPE_VendingMachineWithLamp_Model TYPE_VendingMachineWithLamp_VendingMachine::get_model () const {
  return this->GetRecord(1);
}

void TYPE_VendingMachineWithLamp_VendingMachine::set_model (const TYPE_VendingMachineWithLamp_Model &p) {
  this->SetField(1, p);
}

TYPE_VendingMachineWithLamp_Lamp TYPE_VendingMachineWithLamp_VendingMachine::get_lamp () const {
  return this->GetRecord(2);
}

void TYPE_VendingMachineWithLamp_VendingMachine::set_lamp (const TYPE_VendingMachineWithLamp_Lamp &p) {
  this->SetField(2, p);
}

TYPE_VendingMachineWithLamp_Lamp &TYPE_VendingMachineWithLamp_Lamp::Init (const type_tUM &p1, const type_tUM &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

type_tUM TYPE_VendingMachineWithLamp_Lamp::get_soldOut () const {
  return this->GetMap(1);
}

void TYPE_VendingMachineWithLamp_Lamp::set_soldOut (const type_tUM &p) {
  this->SetField(1, p);
}

type_tUM TYPE_VendingMachineWithLamp_Lamp::get_sell () const {
  return this->GetMap(2);
}

void TYPE_VendingMachineWithLamp_Lamp::set_sell (const type_tUM &p) {
  this->SetField(2, p);
}

TYPE_VendingMachineWithLamp_Model &TYPE_VendingMachineWithLamp_Model::Init (const type_tiM &p1, const type_tiM &p2, const TYPE_VendingMachineWithLamp_Yen &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

type_tiM TYPE_VendingMachineWithLamp_Model::get_stock () const {
  return this->GetMap(1);
}

void TYPE_VendingMachineWithLamp_Model::set_stock (const type_tiM &p) {
  this->SetField(1, p);
}

type_tiM TYPE_VendingMachineWithLamp_Model::get_price () const {
  return this->GetMap(2);
}

void TYPE_VendingMachineWithLamp_Model::set_price (const type_tiM &p) {
  this->SetField(2, p);
}

TYPE_VendingMachineWithLamp_Yen TYPE_VendingMachineWithLamp_Model::get_amount () const {
  return this->GetInt(3);
}

void TYPE_VendingMachineWithLamp_Model::set_amount (const TYPE_VendingMachineWithLamp_Yen &p) {
  this->SetField(3, p);
}

#ifndef DEF_VendingMachineWithLamp_inv_VendingMachine

Bool vdm_VendingMachineWithLamp_inv_VendingMachine (const TYPE_VendingMachineWithLamp_VendingMachine &var_1_1) {
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool((vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock).Dom() == vdm_VendingMachineWithLamp_lamp.GetMap(pos_VendingMachineWithLamp_Lamp_soldOut).Dom()) ? (vdm_VendingMachineWithLamp_lamp == vdm_VendingMachineWithLamp_LampStatus(vdm_VendingMachineWithLamp_model)) : false);
}

#endif // DEF_VendingMachineWithLamp_inv_VendingMachine

#ifndef DEF_VendingMachineWithLamp_inv_Coin

Bool vdm_VendingMachineWithLamp_inv_Coin (const TYPE_VendingMachineWithLamp_Yen &vdm_VendingMachineWithLamp_c) {
  return Bool(mk_set(Int(10), Int(50), Int(100), Int(500)).InSet(vdm_VendingMachineWithLamp_c));
}

#endif // DEF_VendingMachineWithLamp_inv_Coin

#ifndef DEF_VendingMachineWithLamp_inv_Lamp

Bool vdm_VendingMachineWithLamp_inv_Lamp (const TYPE_VendingMachineWithLamp_Lamp &var_1_1) {
  const Map vdm_VendingMachineWithLamp_soldOut (var_1_1.GetMap(pos_VendingMachineWithLamp_Lamp_soldOut));
  const Map vdm_VendingMachineWithLamp_sell (var_1_1.GetMap(pos_VendingMachineWithLamp_Lamp_sell));
  return Bool(vdm_VendingMachineWithLamp_soldOut.Dom() == vdm_VendingMachineWithLamp_sell.Dom());
}

#endif // DEF_VendingMachineWithLamp_inv_Lamp

#ifndef DEF_VendingMachineWithLamp_inv_Model

Bool vdm_VendingMachineWithLamp_inv_Model (const TYPE_VendingMachineWithLamp_Model &var_1_1) {
  const Map vdm_VendingMachineWithLamp_stock (var_1_1.GetMap(pos_VendingMachineWithLamp_Model_stock));
  const Map vdm_VendingMachineWithLamp_price (var_1_1.GetMap(pos_VendingMachineWithLamp_Model_price));
  return Bool(vdm_VendingMachineWithLamp_stock.Dom() == vdm_VendingMachineWithLamp_price.Dom());
}

#endif // DEF_VendingMachineWithLamp_inv_Model


void init_VendingMachineWithLamp_VDMLib () {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_VendingMachineWithLamp_Lamp, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_VendingMachineWithLamp_Lamp, L"VendingMachineWithLamp`Lamp");
  AddRecordTag(L"VendingMachineWithLamp`Lamp", TAG_TYPE_VendingMachineWithLamp_Lamp);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_VendingMachineWithLamp_Model, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_VendingMachineWithLamp_Model, L"VendingMachineWithLamp`Model");
  AddRecordTag(L"VendingMachineWithLamp`Model", TAG_TYPE_VendingMachineWithLamp_Model);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_VendingMachineWithLamp_VendingMachine, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_VendingMachineWithLamp_VendingMachine, L"VendingMachineWithLamp`VendingMachine");
  AddRecordTag(L"VendingMachineWithLamp`VendingMachine", TAG_TYPE_VendingMachineWithLamp_VendingMachine);
}

#include "VendingMachineWithLamp_userimpl.cpp"


void init_VendingMachineWithLamp () {
  init_VendingMachineWithLamp_VDMLib();
  {

#include "VendingMachineWithLamp_init.cpp"


  }
}

#ifndef DEF_VendingMachineWithLamp_ExistStock

Bool vdm_VendingMachineWithLamp_ExistStock (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_stock) {
  if (!vdm_VendingMachineWithLamp_pre_ExistStock(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_stock).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in ExistStock");
  }
  return Bool((static_cast<const Int &>(vdm_VendingMachineWithLamp_stock[vdm_VendingMachineWithLamp_g])).GetValue() > 0);
}

#endif // DEF_VendingMachineWithLamp_ExistStock

#ifndef DEF_VendingMachineWithLamp_pre_ExistStock

Bool vdm_VendingMachineWithLamp_pre_ExistStock (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_stock) {
  return Bool(vdm_VendingMachineWithLamp_stock.Dom().InSet(vdm_VendingMachineWithLamp_g));
}

#endif // DEF_VendingMachineWithLamp_pre_ExistStock

#ifndef DEF_VendingMachineWithLamp_LampStatus

TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_LampStatus (const TYPE_VendingMachineWithLamp_Model &vdm_VendingMachineWithLamp_model) {
  return TYPE_VendingMachineWithLamp_Lamp().Init(vdm_VendingMachineWithLamp_SoldOutStatus(vdm_VendingMachineWithLamp_model), vdm_VendingMachineWithLamp_SellStatus(vdm_VendingMachineWithLamp_model));
}

#endif // DEF_VendingMachineWithLamp_LampStatus

#ifndef DEF_VendingMachineWithLamp_SellStatus

type_tUM vdm_VendingMachineWithLamp_SellStatus (const TYPE_VendingMachineWithLamp_Model &var_1_1) {
  Map vdm_VendingMachineWithLamp_price;
  Map vdm_VendingMachineWithLamp_stock;
  Int vdm_VendingMachineWithLamp_amount;
  bool succ_19 = false;
  if ((succ_19 = (var_1_1.Is(vdm_VendingMachineWithLamp_Model)))) {
    vdm_VendingMachineWithLamp_stock = var_1_1.GetMap(pos_VendingMachineWithLamp_Model_stock);
    vdm_VendingMachineWithLamp_price = var_1_1.GetMap(pos_VendingMachineWithLamp_Model_price);
    vdm_VendingMachineWithLamp_amount = var_1_1.GetInt(pos_VendingMachineWithLamp_Model_amount);
  }
  if (!succ_19) {
    CGUTIL::RunTime(L"Pattern match failed in function apply in function SellStatus");
  }
  Map res_m_3;
  const Set e1_set_15 (vdm_VendingMachineWithLamp_stock.Dom());
  Set tmpSet_18 (e1_set_15);
  Generic tmpe_17;
  for (bool bb_16 = tmpSet_18.First(tmpe_17); bb_16; bb_16 = tmpSet_18.Next(tmpe_17)) {
    const Token vdm_VendingMachineWithLamp_g (tmpe_17);
    res_m_3.Insert(vdm_VendingMachineWithLamp_g, (vdm_VendingMachineWithLamp_AvailablePurchase(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_stock, vdm_VendingMachineWithLamp_price, vdm_VendingMachineWithLamp_amount).GetValue() ? Quote(L"on") : Quote(L"off")));
  }
  return res_m_3;
}

#endif // DEF_VendingMachineWithLamp_SellStatus

#ifndef DEF_VendingMachineWithLamp_EnoughMoney

Bool vdm_VendingMachineWithLamp_EnoughMoney (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_price, const TYPE_VendingMachineWithLamp_Yen &vdm_VendingMachineWithLamp_amount) {
  if (!vdm_VendingMachineWithLamp_pre_EnoughMoney(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_price, vdm_VendingMachineWithLamp_amount).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in EnoughMoney");
  }
  return Bool(vdm_VendingMachineWithLamp_amount.GetValue() >= (static_cast<const Int &>(vdm_VendingMachineWithLamp_price[vdm_VendingMachineWithLamp_g])).GetValue());
}

#endif // DEF_VendingMachineWithLamp_EnoughMoney

#ifndef DEF_VendingMachineWithLamp_pre_EnoughMoney

Bool vdm_VendingMachineWithLamp_pre_EnoughMoney (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_price, const TYPE_VendingMachineWithLamp_Yen &vdm_VendingMachineWithLamp_amount) {
  return Bool(vdm_VendingMachineWithLamp_price.Dom().InSet(vdm_VendingMachineWithLamp_g));
}

#endif // DEF_VendingMachineWithLamp_pre_EnoughMoney

#ifndef DEF_VendingMachineWithLamp_SoldOutStatus

type_tUM vdm_VendingMachineWithLamp_SoldOutStatus (const TYPE_VendingMachineWithLamp_Model &var_1_1) {
  Map vdm_VendingMachineWithLamp_stock;
  bool succ_18 = false;
  if ((succ_18 = (var_1_1.Is(vdm_VendingMachineWithLamp_Model)))) {
    vdm_VendingMachineWithLamp_stock = var_1_1.GetMap(pos_VendingMachineWithLamp_Model_stock);
  }
  if (!succ_18) {
    CGUTIL::RunTime(L"Pattern match failed in function apply in function SoldOutStatus");
  }
  Map res_m_3;
  const Set e1_set_14 (vdm_VendingMachineWithLamp_stock.Dom());
  Set tmpSet_17 (e1_set_14);
  Generic tmpe_16;
  for (bool bb_15 = tmpSet_17.First(tmpe_16); bb_15; bb_15 = tmpSet_17.Next(tmpe_16)) {
    const Token vdm_VendingMachineWithLamp_g (tmpe_16);
    res_m_3.Insert(vdm_VendingMachineWithLamp_g, (!((vdm_VendingMachineWithLamp_ExistStock(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_stock)).GetValue()) ? Quote(L"on") : Quote(L"off")));
  }
  return res_m_3;
}

#endif // DEF_VendingMachineWithLamp_SoldOutStatus

#ifndef DEF_VendingMachineWithLamp_AvailablePurchase

Bool vdm_VendingMachineWithLamp_AvailablePurchase (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_stock, const type_tiM &vdm_VendingMachineWithLamp_price, const TYPE_VendingMachineWithLamp_Yen &vdm_VendingMachineWithLamp_amount) {
  if (!vdm_VendingMachineWithLamp_pre_AvailablePurchase(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_stock, vdm_VendingMachineWithLamp_price, vdm_VendingMachineWithLamp_amount).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in AvailablePurchase");
  }
  return Bool(vdm_VendingMachineWithLamp_ExistStock(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_stock).GetValue() ? vdm_VendingMachineWithLamp_EnoughMoney(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_price, vdm_VendingMachineWithLamp_amount).GetValue() : false);
}

#endif // DEF_VendingMachineWithLamp_AvailablePurchase

#ifndef DEF_VendingMachineWithLamp_pre_AvailablePurchase

Bool vdm_VendingMachineWithLamp_pre_AvailablePurchase (const TYPE_VendingMachineWithLamp_Goods &vdm_VendingMachineWithLamp_g, const type_tiM &vdm_VendingMachineWithLamp_stock, const type_tiM &vdm_VendingMachineWithLamp_price, const TYPE_VendingMachineWithLamp_Yen &vdm_VendingMachineWithLamp_amount) {
  return Bool((vdm_VendingMachineWithLamp_stock.Dom().InSet(vdm_VendingMachineWithLamp_g)) ? (vdm_VendingMachineWithLamp_price.Dom().InSet(vdm_VendingMachineWithLamp_g)) : false);
}

#endif // DEF_VendingMachineWithLamp_pre_AvailablePurchase

#ifndef DEF_VendingMachineWithLamp_init_uVendingMachine

Bool vdm_VendingMachineWithLamp_init_uVendingMachine (const TYPE_VendingMachineWithLamp_VendingMachine &var_1_1) {
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool((vdm_VendingMachineWithLamp_model == TYPE_VendingMachineWithLamp_Model().Init(Map(), Map(), Int(0))) ? (vdm_VendingMachineWithLamp_lamp == TYPE_VendingMachineWithLamp_Lamp().Init(Map(), Map())) : false);
}

#endif // DEF_VendingMachineWithLamp_init_uVendingMachine

#ifndef DEF_VendingMachineWithLamp_post_Return

Bool vdm_VendingMachineWithLamp_post_Return (const TYPE_VendingMachineWithLamp_VendingMachine &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2) {
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_1_1.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool(vdm_VendingMachineWithLamp_model.GetInt(pos_VendingMachineWithLamp_Model_amount).GetValue() == 0);
}

#endif // DEF_VendingMachineWithLamp_post_Return

#ifndef DEF_VendingMachineWithLamp_pre_Purchase

Bool vdm_VendingMachineWithLamp_pre_Purchase (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool((vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock).Dom().InSet(vdm_VendingMachineWithLamp_g)) ? vdm_VendingMachineWithLamp_AvailablePurchase(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock), vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_price), vdm_VendingMachineWithLamp_model.GetInt(pos_VendingMachineWithLamp_Model_amount)).GetValue() : false);
}

#endif // DEF_VendingMachineWithLamp_pre_Purchase

#ifndef DEF_VendingMachineWithLamp_post_Purchase

Bool vdm_VendingMachineWithLamp_post_Purchase (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  TYPE_VendingMachineWithLamp_Model tmpRE_8 (_vdm_VendingMachineWithLamp_model);
  Map val_9;
  Map modmap_10 (Map().Insert(vdm_VendingMachineWithLamp_g, static_cast<const Int &>(_vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock)[vdm_VendingMachineWithLamp_g]) - Int(1)));
  val_9 = _vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock);
  val_9.ImpOverride(modmap_10);
  tmpRE_8.SetField(pos_VendingMachineWithLamp_Model_stock, val_9);
  tmpRE_8.SetField(pos_VendingMachineWithLamp_Model_amount, _vdm_VendingMachineWithLamp_model.GetInt(pos_VendingMachineWithLamp_Model_amount) - static_cast<const Int &>(vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_price)[vdm_VendingMachineWithLamp_g]));
  return Bool(vdm_VendingMachineWithLamp_model == tmpRE_8);
}

#endif // DEF_VendingMachineWithLamp_post_Purchase

#ifndef DEF_VendingMachineWithLamp_post_InsertCoin

Bool vdm_VendingMachineWithLamp_post_InsertCoin (const TYPE_VendingMachineWithLamp_Coin &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3) {
  const Int vdm_VendingMachineWithLamp_c (var_1_1);
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  TYPE_VendingMachineWithLamp_Model tmpRE_9 (_vdm_VendingMachineWithLamp_model);
  tmpRE_9.SetField(pos_VendingMachineWithLamp_Model_amount, _vdm_VendingMachineWithLamp_model.GetInt(pos_VendingMachineWithLamp_Model_amount) + vdm_VendingMachineWithLamp_c);
  return Bool((vdm_VendingMachineWithLamp_model == tmpRE_9) ? (vdm_VendingMachineWithLamp_lamp == vdm_VendingMachineWithLamp_LampStatus(vdm_VendingMachineWithLamp_model)) : false);
}

#endif // DEF_VendingMachineWithLamp_post_InsertCoin

#ifndef DEF_VendingMachineWithLamp_pre_SetupPrice

Bool vdm_VendingMachineWithLamp_pre_SetupPrice (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_Yen &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const Int vdm_VendingMachineWithLamp_p (var_2_2);
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool(vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_price).Dom().InSet(vdm_VendingMachineWithLamp_g));
}

#endif // DEF_VendingMachineWithLamp_pre_SetupPrice

#ifndef DEF_VendingMachineWithLamp_post_SetupPrice

Bool vdm_VendingMachineWithLamp_post_SetupPrice (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_Yen &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3, const TYPE_VendingMachineWithLamp_VendingMachine &var_4_4) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const Int vdm_VendingMachineWithLamp_p (var_2_2);
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_4_4.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_4_4.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  TYPE_VendingMachineWithLamp_Model tmpRE_9 (_vdm_VendingMachineWithLamp_model);
  Map val_10;
  Map modmap_11 (Map().Insert(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_p));
  val_10 = _vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_price);
  val_10.ImpOverride(modmap_11);
  tmpRE_9.SetField(pos_VendingMachineWithLamp_Model_price, val_10);
  return Bool(vdm_VendingMachineWithLamp_model == tmpRE_9);
}

#endif // DEF_VendingMachineWithLamp_post_SetupPrice

#ifndef DEF_VendingMachineWithLamp_pre_SetupStock

Bool vdm_VendingMachineWithLamp_pre_SetupStock (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const Int &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const Int vdm_VendingMachineWithLamp_num (var_2_2);
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool(vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock).Dom().InSet(vdm_VendingMachineWithLamp_g));
}

#endif // DEF_VendingMachineWithLamp_pre_SetupStock

#ifndef DEF_VendingMachineWithLamp_post_SetupStock

Bool vdm_VendingMachineWithLamp_post_SetupStock (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const Int &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3, const TYPE_VendingMachineWithLamp_VendingMachine &var_4_4) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const Int vdm_VendingMachineWithLamp_num (var_2_2);
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_4_4.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_4_4.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  TYPE_VendingMachineWithLamp_Model tmpRE_9 (_vdm_VendingMachineWithLamp_model);
  Map val_10;
  Map modmap_11 (Map().Insert(vdm_VendingMachineWithLamp_g, vdm_VendingMachineWithLamp_num));
  val_10 = _vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock);
  val_10.ImpOverride(modmap_11);
  tmpRE_9.SetField(pos_VendingMachineWithLamp_Model_stock, val_10);
  return Bool(vdm_VendingMachineWithLamp_model == tmpRE_9);
}

#endif // DEF_VendingMachineWithLamp_post_SetupStock

#ifndef DEF_VendingMachineWithLamp_pre_RegisterGoods

Bool vdm_VendingMachineWithLamp_pre_RegisterGoods (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  return Bool(!vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock).Dom().InSet(vdm_VendingMachineWithLamp_g));
}

#endif // DEF_VendingMachineWithLamp_pre_RegisterGoods

#ifndef DEF_VendingMachineWithLamp_post_RegisterGoods

Bool vdm_VendingMachineWithLamp_post_RegisterGoods (const TYPE_VendingMachineWithLamp_Goods &var_1_1, const TYPE_VendingMachineWithLamp_VendingMachine &var_2_2, const TYPE_VendingMachineWithLamp_VendingMachine &var_3_3) {
  const Token vdm_VendingMachineWithLamp_g (var_1_1);
  const TYPE_VendingMachineWithLamp_Model _vdm_VendingMachineWithLamp_model (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp _vdm_VendingMachineWithLamp_lamp (var_2_2.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  const TYPE_VendingMachineWithLamp_Model vdm_VendingMachineWithLamp_model (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_model));
  const TYPE_VendingMachineWithLamp_Lamp vdm_VendingMachineWithLamp_lamp (var_3_3.GetRecord(pos_VendingMachineWithLamp_VendingMachine_lamp));
  TYPE_VendingMachineWithLamp_Model tmpRE_8 (_vdm_VendingMachineWithLamp_model);
  Map m1_15 (_vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_stock));
  Map m2_16 (Map().Insert(vdm_VendingMachineWithLamp_g, Int(0)));
  if (!m1_15.IsCompatible(m2_16)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_15.ImpOverride(m2_16);
  tmpRE_8.SetField(pos_VendingMachineWithLamp_Model_stock, m1_15);
  Map m1_23 (_vdm_VendingMachineWithLamp_model.GetMap(pos_VendingMachineWithLamp_Model_price));
  Map m2_24 (Map().Insert(vdm_VendingMachineWithLamp_g, Int(0)));
  if (!m1_23.IsCompatible(m2_24)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_23.ImpOverride(m2_24);
  tmpRE_8.SetField(pos_VendingMachineWithLamp_Model_price, m1_23);
  return Bool(vdm_VendingMachineWithLamp_model == tmpRE_8);
}

#endif // DEF_VendingMachineWithLamp_post_RegisterGoods


