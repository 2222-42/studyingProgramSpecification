//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-08-28 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:/VDM-SL/studyingProgramSpecification/chap4/reverseArray.vdmsl".


#include "reverseArray.h"


static Int vdm_reverseArray_n;

static Sequence vdm_reverseArray_X;

TYPE_reverseArray_array &TYPE_reverseArray_array::Init (const Int &p1, const type_iL &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

Int TYPE_reverseArray_array::get_n () const {
  return this->GetInt(1);
}

void TYPE_reverseArray_array::set_n (const Int &p) {
  this->SetField(1, p);
}

type_iL TYPE_reverseArray_array::get_X () const {
  return this->GetSequence(2);
}

void TYPE_reverseArray_array::set_X (const type_iL &p) {
  this->SetField(2, p);
}

void init_reverseArray_VDMLib () {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_reverseArray_array, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_reverseArray_array, L"reverseArray`array");
  AddRecordTag(L"reverseArray`array", TAG_TYPE_reverseArray_array);
}

#include "reverseArray_userimpl.cpp"


void init_reverseArray () {
  init_reverseArray_VDMLib();
}

#ifndef DEF_reverseArray_pre_reverseArray

Bool vdm_reverseArray_pre_reverseArray (const TYPE_reverseArray_array &var_1_1) {
  const Int vdm_reverseArray_n (var_1_1.GetInt(pos_reverseArray_array_n));
  const Sequence vdm_reverseArray_X (var_1_1.GetSequence(pos_reverseArray_array_X));
  return Bool(vdm_reverseArray_n.GetValue() == vdm_reverseArray_X.Length());
}

#endif // DEF_reverseArray_pre_reverseArray

#ifndef DEF_reverseArray_post_reverseArray

Bool vdm_reverseArray_post_reverseArray (const TYPE_reverseArray_array &var_1_1, const TYPE_reverseArray_array &var_2_2) {
  const Int _vdm_reverseArray_n (var_1_1.GetInt(pos_reverseArray_array_n));
  const Sequence _vdm_reverseArray_X (var_1_1.GetSequence(pos_reverseArray_array_X));
  const Int vdm_reverseArray_n (var_2_2.GetInt(pos_reverseArray_array_n));
  const Sequence vdm_reverseArray_X (var_2_2.GetSequence(pos_reverseArray_array_X));
  bool tmpQuant_4 = true;
  const Set e1_set_7 (vdm_reverseArray_X.Inds());
  Set tmpSet_21 (e1_set_7);
  Generic tmpe_20;
  for (bool bb_19 = tmpSet_21.First(tmpe_20); bb_19 && tmpQuant_4; bb_19 = tmpSet_21.Next(tmpe_20)) {
    const Int vdm_reverseArray_i (tmpe_20);
    if (_vdm_reverseArray_X.OutOfRange((vdm_reverseArray_n + Int(1) - vdm_reverseArray_i).GetValue())) {
      CGUTIL::RunTime(L"Illegal index");
    }
    if (!((static_cast<Int>(vdm_reverseArray_X[vdm_reverseArray_i])).GetValue() == (static_cast<Int>(_vdm_reverseArray_X[vdm_reverseArray_n + Int(1) - vdm_reverseArray_i])).GetValue())) {
      tmpQuant_4 = false;
    }
  }
  return Bool(tmpQuant_4);
}

#endif // DEF_reverseArray_post_reverseArray


