//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-08-28 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:/VDM-SL/studyingProgramSpecification/chap4/parindrome.vdmsl".


#include "parindrome.h"

#include "parindrome_userimpl.cpp"


void init_parindrome () {}

#ifndef DEF_parindrome_post_parindrome

Bool vdm_parindrome_post_parindrome (const type_iL &vdm_parindrome_X) {
  bool tmpQuant_3 = true;
  const Set e1_set_6 (vdm_parindrome_X.Inds());
  Set tmpSet_21 (e1_set_6);
  Generic tmpe_20;
  for (bool bb_19 = tmpSet_21.First(tmpe_20); bb_19 && tmpQuant_3; bb_19 = tmpSet_21.Next(tmpe_20)) {
    const Int vdm_parindrome_k (tmpe_20);
    if (vdm_parindrome_X.OutOfRange((Int(vdm_parindrome_X.Length()) + Int(1) - vdm_parindrome_k).GetValue())) {
      CGUTIL::RunTime(L"Illegal index");
    }
    if (!((static_cast<Int>(vdm_parindrome_X[vdm_parindrome_k])).GetValue() == (static_cast<Int>(vdm_parindrome_X[Int(vdm_parindrome_X.Length()) + Int(1) - vdm_parindrome_k])).GetValue())) {
      tmpQuant_3 = false;
    }
  }
  return Bool(tmpQuant_3);
}

#endif // DEF_parindrome_post_parindrome


