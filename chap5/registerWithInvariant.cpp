//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-09-02 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:/VDM-SL/studyingProgramSpecification/chap5/registerWithInvariant.vdmsl".


#include "registerWithInvariant.h"


TYPE_registerWithInvariant_cInfo &TYPE_registerWithInvariant_cInfo::Init (const Int &p1, const TYPE_registerWithInvariant_Yen &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

Int TYPE_registerWithInvariant_cInfo::get_capacity () const {
  return this->GetInt(1);
}

void TYPE_registerWithInvariant_cInfo::set_capacity (const Int &p) {
  this->SetField(1, p);
}

TYPE_registerWithInvariant_Yen TYPE_registerWithInvariant_cInfo::get_fee () const {
  return this->GetInt(2);
}

void TYPE_registerWithInvariant_cInfo::set_fee (const TYPE_registerWithInvariant_Yen &p) {
  this->SetField(2, p);
}

TYPE_registerWithInvariant_pInfo &TYPE_registerWithInvariant_pInfo::Init (const TYPE_registerWithInvariant_Email &p1, const TYPE_registerWithInvariant_Address &p2, const Generic &p3, const Int &p4) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  this->SetField(4, p4);
  return * this;
}

TYPE_registerWithInvariant_Email TYPE_registerWithInvariant_pInfo::get_email () const {
  return this->GetField(1);
}

void TYPE_registerWithInvariant_pInfo::set_email (const TYPE_registerWithInvariant_Email &p) {
  this->SetField(1, p);
}

TYPE_registerWithInvariant_Address TYPE_registerWithInvariant_pInfo::get_address () const {
  return this->GetRecord(2);
}

void TYPE_registerWithInvariant_pInfo::set_address (const TYPE_registerWithInvariant_Address &p) {
  this->SetField(2, p);
}

Generic TYPE_registerWithInvariant_pInfo::get_telephone () const {
  return this->GetField(3);
}

void TYPE_registerWithInvariant_pInfo::set_telephone (const Generic &p) {
  this->SetField(3, p);
}

Int TYPE_registerWithInvariant_pInfo::get_age () const {
  return this->GetInt(4);
}

void TYPE_registerWithInvariant_pInfo::set_age (const Int &p) {
  this->SetField(4, p);
}

TYPE_registerWithInvariant_Address &TYPE_registerWithInvariant_Address::Init (const TYPE_registerWithInvariant_Prefecture &p1, const TYPE_registerWithInvariant_City &p2, const TYPE_registerWithInvariant_Detail &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

TYPE_registerWithInvariant_Prefecture TYPE_registerWithInvariant_Address::get_prefecture () const {
  return this->GetField(1);
}

void TYPE_registerWithInvariant_Address::set_prefecture (const TYPE_registerWithInvariant_Prefecture &p) {
  this->SetField(1, p);
}

TYPE_registerWithInvariant_City TYPE_registerWithInvariant_Address::get_city () const {
  return this->GetField(2);
}

void TYPE_registerWithInvariant_Address::set_city (const TYPE_registerWithInvariant_City &p) {
  this->SetField(2, p);
}

TYPE_registerWithInvariant_Detail TYPE_registerWithInvariant_Address::get_detail () const {
  return this->GetField(3);
}

void TYPE_registerWithInvariant_Address::set_detail (const TYPE_registerWithInvariant_Detail &p) {
  this->SetField(3, p);
}

TYPE_registerWithInvariant_RegisterBook &TYPE_registerWithInvariant_RegisterBook::Init (const type_tS &p1, const type_t27registerWithInvariant_pInfoCM &p2, const type_ttM &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

type_tS TYPE_registerWithInvariant_RegisterBook::get_courses () const {
  return this->GetSet(1);
}

void TYPE_registerWithInvariant_RegisterBook::set_courses (const type_tS &p) {
  this->SetField(1, p);
}

type_t27registerWithInvariant_pInfoCM TYPE_registerWithInvariant_RegisterBook::get_person () const {
  return this->GetMap(2);
}

void TYPE_registerWithInvariant_RegisterBook::set_person (const type_t27registerWithInvariant_pInfoCM &p) {
  this->SetField(2, p);
}

type_ttM TYPE_registerWithInvariant_RegisterBook::get_courseReg () const {
  return this->GetMap(3);
}

void TYPE_registerWithInvariant_RegisterBook::set_courseReg (const type_ttM &p) {
  this->SetField(3, p);
}

TYPE_registerWithInvariant_RegisterBookAlt &TYPE_registerWithInvariant_RegisterBookAlt::Init (const type_t27registerWithInvariant_cInfoCM &p1, const type_t27registerWithInvariant_pInfoCM &p2, const type_ttM &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

type_t27registerWithInvariant_cInfoCM TYPE_registerWithInvariant_RegisterBookAlt::get_courses () const {
  return this->GetMap(1);
}

void TYPE_registerWithInvariant_RegisterBookAlt::set_courses (const type_t27registerWithInvariant_cInfoCM &p) {
  this->SetField(1, p);
}

type_t27registerWithInvariant_pInfoCM TYPE_registerWithInvariant_RegisterBookAlt::get_person () const {
  return this->GetMap(2);
}

void TYPE_registerWithInvariant_RegisterBookAlt::set_person (const type_t27registerWithInvariant_pInfoCM &p) {
  this->SetField(2, p);
}

type_ttM TYPE_registerWithInvariant_RegisterBookAlt::get_courseReg () const {
  return this->GetMap(3);
}

void TYPE_registerWithInvariant_RegisterBookAlt::set_courseReg (const type_ttM &p) {
  this->SetField(3, p);
}

TYPE_registerWithInvariant_RegisterBookInv &TYPE_registerWithInvariant_RegisterBookInv::Init (const type_tS &p1, const type_t27registerWithInvariant_pInfoCM &p2, const type_ttM &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

type_tS TYPE_registerWithInvariant_RegisterBookInv::get_courses () const {
  return this->GetSet(1);
}

void TYPE_registerWithInvariant_RegisterBookInv::set_courses (const type_tS &p) {
  this->SetField(1, p);
}

type_t27registerWithInvariant_pInfoCM TYPE_registerWithInvariant_RegisterBookInv::get_person () const {
  return this->GetMap(2);
}

void TYPE_registerWithInvariant_RegisterBookInv::set_person (const type_t27registerWithInvariant_pInfoCM &p) {
  this->SetField(2, p);
}

type_ttM TYPE_registerWithInvariant_RegisterBookInv::get_courseReg () const {
  return this->GetMap(3);
}

void TYPE_registerWithInvariant_RegisterBookInv::set_courseReg (const type_ttM &p) {
  this->SetField(3, p);
}

#ifndef DEF_registerWithInvariant_inv_RegisterBookAlt

Bool vdm_registerWithInvariant_inv_RegisterBookAlt (const TYPE_registerWithInvariant_RegisterBookAlt &vdm_registerWithInvariant_r) {
  return Bool((vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookAlt_person).Dom() == vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookAlt_courseReg).Dom()) ? (vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookAlt_courseReg).Rng().SubSet(vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookAlt_courses).Dom())) : false);
}

#endif // DEF_registerWithInvariant_inv_RegisterBookAlt

#ifndef DEF_registerWithInvariant_inv_RegisterBookInv

Bool vdm_registerWithInvariant_inv_RegisterBookInv (const TYPE_registerWithInvariant_RegisterBookInv &vdm_registerWithInvariant_r) {
  return Bool((vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookInv_person).Dom() == vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookInv_courseReg).Dom()) ? (vdm_registerWithInvariant_r.GetMap(pos_registerWithInvariant_RegisterBookInv_courseReg).Rng().SubSet(vdm_registerWithInvariant_r.GetSet(pos_registerWithInvariant_RegisterBookInv_courses))) : false);
}

#endif // DEF_registerWithInvariant_inv_RegisterBookInv


void init_registerWithInvariant_VDMLib () {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_cInfo, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_cInfo, L"registerWithInvariant`cInfo");
  AddRecordTag(L"registerWithInvariant`cInfo", TAG_TYPE_registerWithInvariant_cInfo);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_pInfo, 4);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_pInfo, L"registerWithInvariant`pInfo");
  AddRecordTag(L"registerWithInvariant`pInfo", TAG_TYPE_registerWithInvariant_pInfo);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_Address, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_Address, L"registerWithInvariant`Address");
  AddRecordTag(L"registerWithInvariant`Address", TAG_TYPE_registerWithInvariant_Address);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_RegisterBook, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_RegisterBook, L"registerWithInvariant`RegisterBook");
  AddRecordTag(L"registerWithInvariant`RegisterBook", TAG_TYPE_registerWithInvariant_RegisterBook);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_RegisterBookAlt, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_RegisterBookAlt, L"registerWithInvariant`RegisterBookAlt");
  AddRecordTag(L"registerWithInvariant`RegisterBookAlt", TAG_TYPE_registerWithInvariant_RegisterBookAlt);
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_registerWithInvariant_RegisterBookInv, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_registerWithInvariant_RegisterBookInv, L"registerWithInvariant`RegisterBookInv");
  AddRecordTag(L"registerWithInvariant`RegisterBookInv", TAG_TYPE_registerWithInvariant_RegisterBookInv);
}

#ifdef DEF_registerWithInvariant_USERIMPL

#include "registerWithInvariant_userimpl.cpp"


#endif // DEF_registerWithInvariant_USERIMPL


void init_registerWithInvariant () {
  init_registerWithInvariant_VDMLib();
}

#ifndef DEF_registerWithInvariant_Add

TYPE_registerWithInvariant_RegisterBookInv vdm_registerWithInvariant_Add (const TYPE_registerWithInvariant_Name &vdm_registerWithInvariant_name, const TYPE_registerWithInvariant_pInfo &vdm_registerWithInvariant_pinfo, const TYPE_registerWithInvariant_Course &vdm_registerWithInvariant_course, const TYPE_registerWithInvariant_RegisterBookInv &vdm_registerWithInvariant_book) {
  if (!vdm_registerWithInvariant_pre_Add(vdm_registerWithInvariant_name, vdm_registerWithInvariant_pinfo, vdm_registerWithInvariant_course, vdm_registerWithInvariant_book).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in Add");
  }
  Map m1_14 (vdm_registerWithInvariant_book.GetMap(pos_registerWithInvariant_RegisterBookInv_person));
  Map m2_15 (Map().Insert(vdm_registerWithInvariant_name, vdm_registerWithInvariant_pinfo));
  if (!m1_14.IsCompatible(m2_15)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_14.ImpOverride(m2_15);
  Map m1_22 (vdm_registerWithInvariant_book.GetMap(pos_registerWithInvariant_RegisterBookInv_courseReg));
  Map m2_23 (Map().Insert(vdm_registerWithInvariant_name, vdm_registerWithInvariant_course));
  if (!m1_22.IsCompatible(m2_23)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_22.ImpOverride(m2_23);
  return TYPE_registerWithInvariant_RegisterBookInv().Init(vdm_registerWithInvariant_book.GetSet(pos_registerWithInvariant_RegisterBookInv_courses), m1_14, m1_22);
}

#endif // DEF_registerWithInvariant_Add

#ifndef DEF_registerWithInvariant_pre_Add

Bool vdm_registerWithInvariant_pre_Add (const TYPE_registerWithInvariant_Name &vdm_registerWithInvariant_name, const TYPE_registerWithInvariant_pInfo &vdm_registerWithInvariant_pinfo, const TYPE_registerWithInvariant_Course &vdm_registerWithInvariant_course, const TYPE_registerWithInvariant_RegisterBookInv &vdm_registerWithInvariant_book) {
  return Bool((!vdm_registerWithInvariant_book.GetMap(pos_registerWithInvariant_RegisterBookInv_person).Dom().InSet(vdm_registerWithInvariant_name)) ? (vdm_registerWithInvariant_book.GetSet(pos_registerWithInvariant_RegisterBookInv_courses).InSet(vdm_registerWithInvariant_course)) : false);
}

#endif // DEF_registerWithInvariant_pre_Add


