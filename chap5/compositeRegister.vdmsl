--
-- Module: compositeRegister
--
-- Description: 
--
-- Version: 
-- Author: 
--

module compositeRegister

--imports
--  from ModuleA all,
--  from ModuleB all

exports all

definitions

--state Sigma of
--  a : nat
--  b : nat
--  inv mk_Sigma(x,y) == x >= y
--  init s == s = mk_Sigma(0,0)
--end

types
    Name = token;
    Email = token;
    Address = token; Telephone = token;
    Info :: email: Email
            address: Address
            telephone: Telephone;
    RegisterBook = map Name to Info;

values

operations

functions
    Add: Name * Info * RegisterBook -> RegisterBook
    Add(name, info, book) ==
        book munion {name |-> info}
    pre name not in set dom(book);

    Delete: Name * RegisterBook -> RegisterBook
    Delete(name, book) ==
        {name} <-: book
    pre name in set dom(book);

    Number: RegisterBook -> nat
    Number(book) ==
        card dom(book);

    FindInfo: Name * RegisterBook -> Info
    FindInfo(name, book) ==
        book(name)
    pre name in set dom(book);

    FindEmail: Name * RegisterBook -> Email
    FindEmail(name, book) ==
        book(name).email
    pre name in set dom(book);

    ChangeEmail: Name * Email * RegisterBook -> RegisterBook
    ChangeEmail(name, email, book) ==
        book ++ {name |-> mu(book(name), email |-> email)}
    pre name in set dom(book);

end compositeRegister
