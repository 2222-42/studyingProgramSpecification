//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2020-08-31 by the VDM-SL to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 09:35:14 +0900)
//
// This file was genereted from "E:\\VDM-SL\\studyingProgramSpecification\\chap5\\Address.vdmsl".


#include "Address.h"


static Map vdm_Address_book;

TYPE_Address_SAddressBook &TYPE_Address_SAddressBook::Init (const type_cLcLM &p1) {
  this->SetField(1, p1);
  return * this;
}

type_cLcLM TYPE_Address_SAddressBook::get_book () const {
  return this->GetMap(1);
}

void TYPE_Address_SAddressBook::set_book (const type_cLcLM &p) {
  this->SetField(1, p);
}

void init_Address_VDMLib () {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_Address_SAddressBook, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_Address_SAddressBook, L"Address`SAddressBook");
  AddRecordTag(L"Address`SAddressBook", TAG_TYPE_Address_SAddressBook);
}

#include "Address_userimpl.cpp"


void init_Address () {
  init_Address_VDMLib();
  vdm_Address_book = Map();
}

#ifndef DEF_Address_AddAddress

TYPE_Address_AddressBook vdm_Address_AddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  if (!vdm_Address_pre_AddAddress(vdm_Address_name, vdm_Address_address, vdm_Address_book).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in AddAddress");
  }
  Map m1_9 (vdm_Address_book);
  Map m2_10 (Map().Insert(vdm_Address_name, vdm_Address_address));
  if (!m1_9.IsCompatible(m2_10)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_9.ImpOverride(m2_10);
  return m1_9;
}

#endif // DEF_Address_AddAddress

#ifndef DEF_Address_pre_AddAddress

Bool vdm_Address_pre_AddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(!vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_AddAddress

#ifndef DEF_Address_EAddAddress

TYPE_Address_AddressBook vdm_Address_EAddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  if (!vdm_Address_pre_EAddAddress(vdm_Address_name, vdm_Address_address, vdm_Address_book).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in EAddAddress");
  }
  return vdm_Address_book;
}

#endif // DEF_Address_EAddAddress

#ifndef DEF_Address_pre_EAddAddress

Bool vdm_Address_pre_EAddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_EAddAddress

#ifndef DEF_Address_FindAddress

TYPE_Address_Address vdm_Address_FindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  if (!vdm_Address_pre_FindAddress(vdm_Address_name, vdm_Address_book).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in FindAddress");
  }
  return static_cast<const Sequence &>(vdm_Address_book[vdm_Address_name]);
}

#endif // DEF_Address_FindAddress

#ifndef DEF_Address_pre_FindAddress

Bool vdm_Address_pre_FindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_FindAddress

#ifndef DEF_Address_pre_IAddAddress

Bool vdm_Address_pre_IAddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(!vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_IAddAddress

#ifndef DEF_Address_post_IAddAddress

Bool vdm_Address_post_IAddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book, const TYPE_Address_AddressBook &vdm_Address_r) {
  Map m1_12 (vdm_Address_book);
  Map m2_13 (Map().Insert(vdm_Address_name, vdm_Address_address));
  if (!m1_12.IsCompatible(m2_13)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_12.ImpOverride(m2_13);
  return Bool(vdm_Address_r == m1_12);
}

#endif // DEF_Address_post_IAddAddress

#ifndef DEF_Address_RAddAddress

type_cLcLMU2P vdm_Address_RAddAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  Tuple varRes_4 (2);
  if (!vdm_Address_book.Dom().InSet(vdm_Address_name)) {
    varRes_4 = Tuple(2);
    Map m1_28 (vdm_Address_book);
    Map m2_29 (Map().Insert(vdm_Address_name, vdm_Address_address));
    if (!m1_28.IsCompatible(m2_29)) {
      CGUTIL::RunTime(L"Duplicate entries had different values");
    }
    m1_28.ImpOverride(m2_29);
    varRes_4.SetField(1, m1_28);
    varRes_4.SetField(2, Quote(L"ok"));
  }
  else {
    varRes_4 = mk_(vdm_Address_book, Quote(L"error"));
  }
  return varRes_4;
}

#endif // DEF_Address_RAddAddress

#ifndef DEF_Address_EFindAddress

Generic vdm_Address_EFindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  if (!vdm_Address_pre_EFindAddress(vdm_Address_name, vdm_Address_book).GetValue()) {
    CGUTIL::RunTime(L"Precondition failure in EFindAddress");
  }
  return Nil();
}

#endif // DEF_Address_EFindAddress

#ifndef DEF_Address_pre_EFindAddress

Bool vdm_Address_pre_EFindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(!vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_EFindAddress

#ifndef DEF_Address_pre_IFindAddress

Bool vdm_Address_pre_IFindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  return Bool(vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_IFindAddress

#ifndef DEF_Address_post_IFindAddress

Bool vdm_Address_post_IFindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book, const TYPE_Address_Address &vdm_Address_address) {
  return Bool(vdm_Address_address == static_cast<const Sequence &>(vdm_Address_book[vdm_Address_name]));
}

#endif // DEF_Address_post_IFindAddress

#ifndef DEF_Address_RFindAddress

type_UU2P vdm_Address_RFindAddress (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_AddressBook &vdm_Address_book) {
  Tuple varRes_3 (2);
  if (vdm_Address_pre_FindAddress(vdm_Address_name, vdm_Address_book).GetValue()) {
    varRes_3 = Tuple(2);
    varRes_3.SetField(1, vdm_Address_FindAddress(vdm_Address_name, vdm_Address_book));
    varRes_3.SetField(2, Quote(L"ok"));
  }
  else {
    varRes_3 = Tuple(2);
    varRes_3.SetField(1, vdm_Address_EFindAddress(vdm_Address_name, vdm_Address_book));
    varRes_3.SetField(2, Quote(L"error"));
  }
  return varRes_3;
}

#endif // DEF_Address_RFindAddress

#ifndef DEF_Address_RAddAddressAlt

type_cLcLMU2P vdm_Address_RAddAddressAlt (const TYPE_Address_Name &vdm_Address_name, const TYPE_Address_Address &vdm_Address_address, const TYPE_Address_AddressBook &vdm_Address_book) {
  Tuple varRes_4 (2);
  if (vdm_Address_pre_AddAddress(vdm_Address_name, vdm_Address_address, vdm_Address_book).GetValue()) {
    varRes_4 = Tuple(2);
    varRes_4.SetField(1, vdm_Address_AddAddress(vdm_Address_name, vdm_Address_address, vdm_Address_book));
    varRes_4.SetField(2, Quote(L"ok"));
  }
  else {
    varRes_4 = Tuple(2);
    varRes_4.SetField(1, vdm_Address_EAddAddress(vdm_Address_name, vdm_Address_address, vdm_Address_book));
    varRes_4.SetField(2, Quote(L"error"));
  }
  return varRes_4;
}

#endif // DEF_Address_RAddAddressAlt

#ifndef DEF_Address_init_uSAddressBook

Bool vdm_Address_init_uSAddressBook (const TYPE_Address_SAddressBook &vdm_Address_s) {
  return Bool(vdm_Address_s == TYPE_Address_SAddressBook().Init(Map()));
}

#endif // DEF_Address_init_uSAddressBook

#ifndef DEF_Address_pre_SAddAddress

Bool vdm_Address_pre_SAddAddress (const TYPE_Address_Name &var_1_1, const TYPE_Address_Address &var_2_2, const TYPE_Address_SAddressBook &var_3_3) {
  const Sequence vdm_Address_name (var_1_1);
  const Sequence vdm_Address_address (var_2_2);
  const Map vdm_Address_book (var_3_3.GetMap(pos_Address_SAddressBook_book));
  return Bool(!vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_SAddAddress

#ifndef DEF_Address_post_SAddAddress

Bool vdm_Address_post_SAddAddress (const TYPE_Address_Name &var_1_1, const TYPE_Address_Address &var_2_2, const TYPE_Address_SAddressBook &var_3_3, const TYPE_Address_SAddressBook &var_4_4) {
  const Sequence vdm_Address_name (var_1_1);
  const Sequence vdm_Address_address (var_2_2);
  const Map _vdm_Address_book (var_3_3.GetMap(pos_Address_SAddressBook_book));
  const Map vdm_Address_book (var_4_4.GetMap(pos_Address_SAddressBook_book));
  Map m1_12 (_vdm_Address_book);
  Map m2_13 (Map().Insert(vdm_Address_name, vdm_Address_address));
  if (!m1_12.IsCompatible(m2_13)) {
    CGUTIL::RunTime(L"Duplicate entries had different values");
  }
  m1_12.ImpOverride(m2_13);
  return Bool(vdm_Address_book == m1_12);
}

#endif // DEF_Address_post_SAddAddress

#ifndef DEF_Address_pre_SFindAddress

Bool vdm_Address_pre_SFindAddress (const TYPE_Address_Name &var_1_1, const TYPE_Address_SAddressBook &var_2_2) {
  const Sequence vdm_Address_name (var_1_1);
  const Map vdm_Address_book (var_2_2.GetMap(pos_Address_SAddressBook_book));
  return Bool(vdm_Address_book.Dom().InSet(vdm_Address_name));
}

#endif // DEF_Address_pre_SFindAddress

#ifndef DEF_Address_post_SFindAddress

Bool vdm_Address_post_SFindAddress (const TYPE_Address_Name &var_1_1, const TYPE_Address_Address &var_2_2, const TYPE_Address_SAddressBook &var_3_3, const TYPE_Address_SAddressBook &var_4_4) {
  const Sequence vdm_Address_name (var_1_1);
  const Sequence vdm_Address_r (var_2_2);
  const Map _vdm_Address_book (var_3_3.GetMap(pos_Address_SAddressBook_book));
  const Map vdm_Address_book (var_4_4.GetMap(pos_Address_SAddressBook_book));
  return Bool(vdm_Address_r == static_cast<const Sequence &>(vdm_Address_book[vdm_Address_name]));
}

#endif // DEF_Address_post_SFindAddress


